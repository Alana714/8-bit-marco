import pygame as pg

_ = False

mini_map = [
    [1, 1, 1, 1, 1, 1, 1, 8, 7, 9, 1, 1, 1, 1, 1, 1, 1],
    [1, _, _, _, _, _, 1, _, _, _, 1, _, _, _, _, _, 1],
    [1, _, _, _, _, _, 6, _, _, _, 10, _, _, _, _, _, 1],
    [1, _, _, _, _, _, 5, _, _, _, 11, _, _, _, _, _, 1],
    [1, 1, 32, 33, 1, _, 1, _, _, _, 1, _, 1, 41, 40, 1, 5],
    [31, _, _, _, 1, 14, 15, 43, _, 43, 16, 17, 1, _, _, _, 39],
    [30, _, _, _, 44, _, _, _, _, _, _, _, 45, _, _, _, 38],
    [29, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 37],
    [28, _, _, _, 44, _, _, _, _, _, _, _, 45, _, _, _, 36],
    [1, 1, 27, 26, 1, _, _, _, _, _, _, _, 1, 34, 35, 1, 1],
    [1, _, _, _, 1, 13, 12, 42, _, 42, 19, 18, 1, _, _, _, 1],
    [1, _, _, _, _, _, 22, _, _, _, 23, _, _, _, _, _, 1],
    [1, _, _, _, _, _, 21, _, _, _, 24, _, _, _, _, _, 1],
    [1, _, _, _, _, _, 20, _, _, _, 25, _, _, _, _, _, 1],
    [1, _, _, _, _, _, 1, 1, _, 1, 1, _, _, _, _, _, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, _, 1, 1, _, _, _, _, _, 1],
    [1, _, 1, _, _, _, _, _, _, _, 2, _, _, _, _, _, 1],
    [1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],

]
"""mini_map = [
    [_, _, 5, 6, 5, 6, 1, 6, 5, 6, 5, 1, 1],
    [_, _, 1, _, _, _, _, _, _, _, _, _, 5],
    [_, _, 5, _, _, _, _, _, _, _, _, _, 6],
    [_, _, 6, _, _, _, _, _, _, _, _, _, 1],
    [_, _, 5, _, _, _, _, _, _, _, _, _, 6],
    [_, _, 6, _, _, _, _, _, _, _, _, _, 5],
    [1, 1, 5, 1, 1, _, _, _, 1, 1, 5, 1, 1],
    [5, _, _, _, _, _, _, _, _, _, _, _, 5],
    [6, _, _, _, _, _, _, _, _, _, _, _, 1],
    [5, _, _, _, _, _, _, _, _, _, _, _, 5],
    [6, _, _, _, _, _, _, _, _, _, _, _, 6],
    [1, _, _, _, _, _, _, _, _, _, _, _, 5],
    [1, 1, 1, 1, 1, 1, _, 1, 1, 1, 1, 1, 1],
    [1, _, _, _, _, _, _, _, 2, _, _, _, 1],
    [1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],

]"""

class Map:
    def __init__(self, game):
        self.game = game
        self.mini_map = mini_map
        self.world_map = {}
        self.get_map()

    def get_map(self):
        for j, row in enumerate(self.mini_map):
            for i, value in enumerate(row):
                if value:
                    self.world_map[(i, j)] = value

    def draw(self):
        [pg.draw.rect(self.game.screen, 'darkgray', (pos[0] * 100, pos[1] * 100, 100, 100), 2)
         for pos in self.world_map
         ]